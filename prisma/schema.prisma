// Prisma Schema for LuxeShop E-Commerce Platform
// This schema handles users, products, cart, orders, and reviews

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  firstName     String?
  lastName      String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cart          CartItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id           String   @id @default(cuid())
  userId       String
  fullName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  zipCode      String
  country      String   @default("United States")
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
  
  @@index([userId])
}

enum Category {
  ELECTRONICS
  CLOTHING
  HOME_GARDEN
  SPORTS_OUTDOORS
  BOOKS
  TOYS
  BEAUTY
  JEWELRY
}

model Product {
  id            String     @id @default(cuid())
  name          String
  slug          String     @unique
  description   String
  price         Float
  comparePrice  Float?     // Original price for showing discounts
  category      Category
  inventory     Int        @default(0)
  imageUrl      String
  images        String[]   // Additional images
  featured      Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  orderItems    OrderItem[]
  reviews       Review[]
  cartItems     CartItem[]
  
  @@index([category])
  @@index([featured])
}

model CartItem {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@index([userId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id                    String      @id @default(cuid())
  userId                String
  addressId             String
  status                OrderStatus @default(PENDING)
  total                 Float
  discount              Float       @default(0)
  couponCode            String?
  stripeSessionId       String?     @unique
  stripePaymentIntentId String?     @unique
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  user                  User        @relation(fields: [userId], references: [id])
  address               Address     @relation(fields: [addressId], references: [id])
  items                 OrderItem[]
  
  @@index([userId])
  @@index([status])
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float   // Store price at time of purchase
  
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])
  
  @@index([orderId])
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model Coupon {
  id              String     @id @default(cuid())
  code            String     @unique
  type            CouponType
  value           Float      // Percentage (10, 15, 20) or fixed amount (5, 10)
  minPurchase     Float      @default(0)
  maxDiscount     Float?     // Max discount for percentage coupons
  expiresAt       DateTime?
  usageLimit      Int?       // Total usage limit
  usageCount      Int        @default(0)
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  
  @@index([code])
  @@index([isActive])
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  rating      Int      // 1-5 stars
  title       String
  comment     String
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId]) // One review per user per product
  @@index([productId])
}
